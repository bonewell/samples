@startuml

class asio::io_context
note bottom
    int main() {
        asio::io_context io_context;
        tcp_server(io_context);
        io_context.run();
    }
end note

class enable_shared_from_this
class tcp_connection {
    - socket : socket
    - message : string
    + {static} create(io_context) : shared_ptr<tcp_connection>
    + socket() : socket
    + start()
    - tcp_connection(io_context)
    - handle_write(error_code, size_t)
}
enable_shared_from_this <|-- tcp_connection
asio::io_context <. tcp_connection
note bottom of tcp_connection
    start() {
        message = make_message();
        async_write(socket, buffer(message),
            bind(&handle_write, shared_from_this(),
                error, bytes_transferred));
    }
end note

class tcp_server {
    - acceptor : acceptor
    + tcp_server(io_context)
    - start_accept()
    - handle_accept(new_conn, error)
}
tcp_server .> asio::io_context
note top of tcp_server
    tcp_server(...) {
        start_accept();
    }
end note
note left of tcp_server
    start_accept() {
        auto new_conn = tcp_connection::create(
            acceptor.get_executor().context());
        acceptor.async_accept(new_conn->socket(),
            bind(&handle_accept, this, new_conn, error));
    }
end note
note bottom of tcp_server
    handle_accet(...) {
        if (!error)
            new_conn->start();
        start_accept();
    }
end note
tcp_server .> tcp_connection
@enduml

